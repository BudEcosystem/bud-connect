"""add_license_provider_model_tables

Revision ID: efd11e4dfb72
Revises: 2c3d4e5f6g7h
Create Date: 2025-08-31 18:02:33.497949

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'efd11e4dfb72'
down_revision: Union[str, None] = '2c3d4e5f6g7h'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if enum types exist before creating them
    connection = op.get_bind()
    
    # Check and create modelendpointenum if it doesn't exist
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'modelendpointenum'"))
    if not result.fetchone():
        sa.Enum('CHAT', 'COMPLETION', 'IMAGE_GENERATION', 'AUDIO_TRANSCRIPTION', 'AUDIO_SPEECH', 'EMBEDDING', 'BATCH', 'RESPONSE', 'RERANK', 'MODERATION', name='modelendpointenum').create(op.get_bind())
    
    # Check and create modalityenum if it doesn't exist
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'modalityenum'"))
    if not result.fetchone():
        sa.Enum('TEXT_INPUT', 'TEXT_OUTPUT', 'IMAGE_INPUT', 'IMAGE_OUTPUT', 'AUDIO_INPUT', 'AUDIO_OUTPUT', name='modalityenum').create(op.get_bind())
    
    # Check if tables exist before creating them
    inspector = sa.inspect(connection)
    existing_tables = inspector.get_table_names()
    
    if 'license' not in existing_tables:
        op.create_table('license',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('key', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('type', sa.String(), nullable=False),
        sa.Column('type_description', sa.Text(), nullable=False),
        sa.Column('type_suitability', sa.String(), nullable=False),
        sa.Column('faqs', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('modified_at', sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('key')
        )
    
    if 'provider' not in existing_tables:
        op.create_table('provider',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('provider_type', sa.String(), nullable=False),
        sa.Column('icon', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('credentials', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('modified_at', sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('provider_type')
        )
    
    if 'model_info' not in existing_tables:
        op.create_table('model_info',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('uri', sa.String(), nullable=False),
        sa.Column('modality', postgresql.ARRAY(postgresql.ENUM('TEXT_INPUT', 'TEXT_OUTPUT', 'IMAGE_INPUT', 'IMAGE_OUTPUT', 'AUDIO_INPUT', 'AUDIO_OUTPUT', name='modalityenum', create_type=False)), nullable=True),
        sa.Column('input_cost', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('output_cost', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('cache_cost', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('search_context_cost_per_query', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('tokens', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('rate_limits', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('media_limits', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('provider_id', sa.UUID(), nullable=False),
        sa.Column('deprecation_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('endpoints', postgresql.ARRAY(postgresql.ENUM('CHAT', 'COMPLETION', 'IMAGE_GENERATION', 'AUDIO_TRANSCRIPTION', 'AUDIO_SPEECH', 'EMBEDDING', 'BATCH', 'RESPONSE', 'RERANK', 'MODERATION', name='modelendpointenum', create_type=False)), nullable=True),
        sa.Column('license_id', sa.UUID(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('modified_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(['license_id'], ['license.id'], ),
        sa.ForeignKeyConstraint(['provider_id'], ['provider.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('uri')
        )
    
    if 'engine_version_model_info' not in existing_tables:
        op.create_table('engine_version_model_info',
        sa.Column('engine_version_id', sa.UUID(), nullable=False),
        sa.Column('model_info_id', sa.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(['engine_version_id'], ['engine_version.id'], ),
        sa.ForeignKeyConstraint(['model_info_id'], ['model_info.id'], ),
        sa.PrimaryKeyConstraint('engine_version_id', 'model_info_id')
        )
    
    if 'engine_version_provider' not in existing_tables:
        op.create_table('engine_version_provider',
        sa.Column('engine_version_id', sa.UUID(), nullable=False),
        sa.Column('provider_id', sa.UUID(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(['engine_version_id'], ['engine_version.id'], ),
        sa.ForeignKeyConstraint(['provider_id'], ['provider.id'], ),
        sa.PrimaryKeyConstraint('engine_version_id', 'provider_id')
        )
    
    if 'model_details' not in existing_tables:
        op.create_table('model_details',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('model_info_id', sa.UUID(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('advantages', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('disadvantages', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('use_cases', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('evaluations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('languages', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('tasks', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('papers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('github_url', sa.String(), nullable=True),
        sa.Column('website_url', sa.String(), nullable=True),
        sa.Column('logo_url', sa.String(), nullable=True),
        sa.Column('architecture', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('model_tree', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('extraction_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('modified_at', sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(['model_info_id'], ['model_info.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('model_info_id')
        )
    
    # Check if column exists before adding it
    columns = [col['name'] for col in inspector.get_columns('engine_version')] if 'engine_version' in existing_tables else []
    if 'engine_version' in existing_tables and 'container_image' not in columns:
        op.add_column('engine_version', sa.Column('container_image', sa.String(), nullable=True))
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Only drop column if it exists
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    existing_tables = inspector.get_table_names()
    
    if 'engine_version' in existing_tables:
        columns = [col['name'] for col in inspector.get_columns('engine_version')]
        if 'container_image' in columns:
            op.drop_column('engine_version', 'container_image')
    
    # Drop tables if they exist
    for table in ['model_details', 'engine_version_provider', 'engine_version_model_info', 'model_info', 'provider', 'license']:
        if table in existing_tables:
            op.drop_table(table)
    
    # Drop enum types if they exist
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'modalityenum'"))
    if result.fetchone():
        sa.Enum('TEXT_INPUT', 'TEXT_OUTPUT', 'IMAGE_INPUT', 'IMAGE_OUTPUT', 'AUDIO_INPUT', 'AUDIO_OUTPUT', name='modalityenum').drop(op.get_bind())
    
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'modelendpointenum'"))
    if result.fetchone():
        sa.Enum('CHAT', 'COMPLETION', 'IMAGE_GENERATION', 'AUDIO_TRANSCRIPTION', 'AUDIO_SPEECH', 'EMBEDDING', 'BATCH', 'RESPONSE', 'RERANK', 'MODERATION', name='modelendpointenum').drop(op.get_bind())
    # ### end Alembic commands ###